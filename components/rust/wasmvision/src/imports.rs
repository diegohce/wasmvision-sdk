// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasmvision {
  #[allow(dead_code)]
  pub mod platform {
    #[allow(dead_code, clippy::all)]
    pub mod key_value {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// An open key-value store

      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Store{
        handle: _rt::Resource<Store>,
      }

      impl Store{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: _rt::Resource::from_handle(handle),
          }
        }

        #[doc(hidden)]
        pub fn take_handle(&self) -> u32 {
          _rt::Resource::take_handle(&self.handle)
        }

        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          _rt::Resource::handle(&self.handle)
        }
      }


      unsafe impl _rt::WasmResource for Store{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();

          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[resource-drop]store"]
              fn drop(_: u32);
            }

            drop(_handle);
          }
        }
      }

      /// The set of errors which may be raised by functions in this interface
      #[derive(Clone)]
      pub enum Error {
        /// Too many stores have been opened simultaneously. Closing one or more
        /// stores prior to retrying may address this.
        StoreTableFull,
        /// The host does not recognize the store label requested.
        NoSuchStore,
        /// The requesting component does not have access to the specified store
        /// (which may or may not exist).
        AccessDenied,
        /// Some implementation-specific error has occurred (e.g. I/O)
        Other(_rt::String),
      }
      impl ::core::fmt::Debug for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Error::StoreTableFull => {
              f.debug_tuple("Error::StoreTableFull").finish()
            }
            Error::NoSuchStore => {
              f.debug_tuple("Error::NoSuchStore").finish()
            }
            Error::AccessDenied => {
              f.debug_tuple("Error::AccessDenied").finish()
            }
            Error::Other(e) => {
              f.debug_tuple("Error::Other").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for Error {}
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Open the store with the specified label.
        ///
        /// `label` must refer to a store allowed in the spin.toml manifest.
        ///
        /// `error::no-such-store` will be raised if the `label` is not recognized.
        pub fn open(label: &str,) -> Result<Store,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = label;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[static]store.open"]
              fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import(ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = *ptr1.add(4).cast::<i32>();

                  Store::from_handle(l3 as u32)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v8 = match l4 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e8 = {
                        let l5 = *ptr1.add(8).cast::<*mut u8>();
                        let l6 = *ptr1.add(12).cast::<usize>();
                        let len7 = l6;
                        let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                        _rt::string_lift(bytes7)
                      };
                      Error::Other(e8)
                    }
                  };

                  v8
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Get the value associated with the specified `key`
        ///
        /// Returns `ok(none)` if the key does not exist.
        pub fn get(&self,key: &str,) -> Result<Option<_rt::Vec::<u8>>,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = key;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[method]store.get"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                  match l3 {
                    0 => None,
                    1 => {
                      let e = {
                        let l4 = *ptr1.add(8).cast::<*mut u8>();
                        let l5 = *ptr1.add(12).cast::<usize>();
                        let len6 = l5;

                        _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                      };
                      Some(e)
                    }
                    _ => _rt::invalid_enum_discriminant(),
                  }
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l7 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v11 = match l7 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e11 = {
                        let l8 = *ptr1.add(8).cast::<*mut u8>();
                        let l9 = *ptr1.add(12).cast::<usize>();
                        let len10 = l9;
                        let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                        _rt::string_lift(bytes10)
                      };
                      Error::Other(e11)
                    }
                  };

                  v11
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Set the `value` associated with the specified `key` overwriting any existing value.
        pub fn set(&self,key: &str,value: &[u8],) -> Result<(),Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = key;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let vec1 = value;
            let ptr1 = vec1.as_ptr().cast::<u8>();
            let len1 = vec1.len();
            let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[method]store.set"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
            let l3 = i32::from(*ptr2.add(0).cast::<u8>());
            match l3 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr2.add(4).cast::<u8>());
                  let v8 = match l4 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e8 = {
                        let l5 = *ptr2.add(8).cast::<*mut u8>();
                        let l6 = *ptr2.add(12).cast::<usize>();
                        let len7 = l6;
                        let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                        _rt::string_lift(bytes7)
                      };
                      Error::Other(e8)
                    }
                  };

                  v8
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Delete the tuple with the specified `key`
        ///
        /// No error is raised if a tuple did not previously exist for `key`.
        pub fn delete(&self,key: &str,) -> Result<(),Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = key;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[method]store.delete"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v7 = match l3 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e7 = {
                        let l4 = *ptr1.add(8).cast::<*mut u8>();
                        let l5 = *ptr1.add(12).cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                        _rt::string_lift(bytes6)
                      };
                      Error::Other(e7)
                    }
                  };

                  v7
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Return whether a tuple exists for the specified `key`
        pub fn exists(&self,key: &str,) -> Result<bool,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let vec0 = key;
            let ptr0 = vec0.as_ptr().cast::<u8>();
            let len0 = vec0.len();
            let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[method]store.exists"]
              fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
            let l2 = i32::from(*ptr1.add(0).cast::<u8>());
            match l2 {
              0 => {
                let e = {
                  let l3 = i32::from(*ptr1.add(4).cast::<u8>());

                  _rt::bool_lift(l3 as u8)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                  let v8 = match l4 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e8 = {
                        let l5 = *ptr1.add(8).cast::<*mut u8>();
                        let l6 = *ptr1.add(12).cast::<usize>();
                        let len7 = l6;
                        let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                        _rt::string_lift(bytes7)
                      };
                      Error::Other(e8)
                    }
                  };

                  v8
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl Store {
        #[allow(unused_unsafe, clippy::all)]
        /// Return a list of all the keys
        pub fn get_keys(&self,) -> Result<_rt::Vec::<_rt::String>,Error>{
          unsafe {
            #[repr(align(4))]
            struct RetArea([::core::mem::MaybeUninit::<u8>; 16]);
            let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasmvision:platform/key-value")]
            extern "C" {
              #[link_name = "[method]store.get-keys"]
              fn wit_import(_: i32, _: *mut u8, );
            }

            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: *mut u8, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*ptr0.add(0).cast::<u8>());
            match l1 {
              0 => {
                let e = {
                  let l2 = *ptr0.add(4).cast::<*mut u8>();
                  let l3 = *ptr0.add(8).cast::<usize>();
                  let base7 = l2;
                  let len7 = l3;
                  let mut result7 = _rt::Vec::with_capacity(len7);
                  for i in 0..len7 {
                    let base = base7.add(i * 8);
                    let e7 = {
                      let l4 = *base.add(0).cast::<*mut u8>();
                      let l5 = *base.add(4).cast::<usize>();
                      let len6 = l5;
                      let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                      _rt::string_lift(bytes6)
                    };
                    result7.push(e7);
                  }
                  _rt::cabi_dealloc(base7, len7 * 8, 4);

                  result7
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l8 = i32::from(*ptr0.add(4).cast::<u8>());
                  let v12 = match l8 {
                    0 => {
                      Error::StoreTableFull
                    }
                    1 => {
                      Error::NoSuchStore
                    }
                    2 => {
                      Error::AccessDenied
                    }
                    n => {
                      debug_assert_eq!(n, 3, "invalid enum discriminant");
                      let e12 = {
                        let l9 = *ptr0.add(8).cast::<*mut u8>();
                        let l10 = *ptr0.add(12).cast::<usize>();
                        let len11 = l10;
                        let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                        _rt::string_lift(bytes11)
                      };
                      Error::Other(e12)
                    }
                  };

                  v12
                };
                Err(e)
              }
              _ => _rt::invalid_enum_discriminant(),
            }
          }
        }
      }

    }

    #[allow(dead_code, clippy::all)]
    pub mod http {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// HTTP errors returned by the runtime.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
      pub enum HttpError {
        Success,
        DestinationNotAllowed,
        InvalidUrl,
        RequestError,
        RuntimeError,
        TooManyRequests,
      }
      impl HttpError{
        pub fn name(&self) -> &'static str {
          match self {
            HttpError::Success => "success",
            HttpError::DestinationNotAllowed => "destination-not-allowed",
            HttpError::InvalidUrl => "invalid-url",
            HttpError::RequestError => "request-error",
            HttpError::RuntimeError => "runtime-error",
            HttpError::TooManyRequests => "too-many-requests",
          }
        }
        pub fn message(&self) -> &'static str {
          match self {
            HttpError::Success => "",
            HttpError::DestinationNotAllowed => "",
            HttpError::InvalidUrl => "",
            HttpError::RequestError => "",
            HttpError::RuntimeError => "",
            HttpError::TooManyRequests => "",
          }
        }
      }
      impl ::core::fmt::Debug for HttpError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("HttpError")
          .field("code", &(*self as i32))
          .field("name", &self.name())
          .field("message", &self.message())
          .finish()
        }
      }
      impl ::core::fmt::Display for HttpError{
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{} (error {})", self.name(), *self as i32)
        }
      }

      impl std::error::Error for HttpError {}

      impl HttpError{
        #[doc(hidden)]
        pub unsafe fn _lift(val: u8) -> HttpError{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }

          match val {
            0 => HttpError::Success,
            1 => HttpError::DestinationNotAllowed,
            2 => HttpError::InvalidUrl,
            3 => HttpError::RequestError,
            4 => HttpError::RuntimeError,
            5 => HttpError::TooManyRequests,

            _ => panic!("invalid enum discriminant"),
          }
        }
      }

      #[allow(unused_unsafe, clippy::all)]
      pub fn get(url: &str,) -> Result<_rt::Vec::<u8>,HttpError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = url;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/http")]
          extern "C" {
            #[link_name = "get"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1);
          let l2 = i32::from(*ptr1.add(0).cast::<u8>());
          match l2 {
            0 => {
              let e = {
                let l3 = *ptr1.add(4).cast::<*mut u8>();
                let l4 = *ptr1.add(8).cast::<usize>();
                let len5 = l4;

                _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l6 = i32::from(*ptr1.add(4).cast::<u8>());

                HttpError::_lift(l6 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn post(url: &str,content_type: &str,body: &[u8],) -> Result<_rt::Vec::<u8>,HttpError>{
        unsafe {
          #[repr(align(4))]
          struct RetArea([::core::mem::MaybeUninit::<u8>; 12]);
          let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
          let vec0 = url;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();
          let vec1 = content_type;
          let ptr1 = vec1.as_ptr().cast::<u8>();
          let len1 = vec1.len();
          let vec2 = body;
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasmvision:platform/http")]
          extern "C" {
            #[link_name = "post"]
            fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8, ){ unreachable!() }
          wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2, ptr3);
          let l4 = i32::from(*ptr3.add(0).cast::<u8>());
          match l4 {
            0 => {
              let e = {
                let l5 = *ptr3.add(4).cast::<*mut u8>();
                let l6 = *ptr3.add(8).cast::<usize>();
                let len7 = l6;

                _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l8 = i32::from(*ptr3.add(4).cast::<u8>());

                HttpError::_lift(l8 as u8)
              };
              Err(e)
            }
            _ => _rt::invalid_enum_discriminant(),
          }
        }
      }

    }

  }
}
mod _rt {


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      String::from_utf8_unchecked(bytes)
    }
  }
  pub unsafe fn invalid_enum_discriminant<T>() -> T {
    if cfg!(debug_assertions) {
      panic!("invalid enum discriminant")
    } else {
      core::hint::unreachable_unchecked()
    }
  }
  pub unsafe fn bool_lift(val: u8) -> bool {
    if cfg!(debug_assertions) {
      match val {
        0 => false,
        1 => true,
        _ => panic!("invalid bool discriminant"),
      }
    } else {
      val != 0
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.32.0:wasmvision:platform:imports:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 848] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd2\x05\x01A\x02\x01\
A\x04\x01B\x19\x04\0\x05store\x03\x01\x01q\x04\x10store-table-full\0\0\x0dno-suc\
h-store\0\0\x0daccess-denied\0\0\x05other\x01s\0\x04\0\x05error\x03\0\x01\x01i\0\
\x01j\x01\x03\x01\x02\x01@\x01\x05labels\0\x04\x04\0\x12[static]store.open\x01\x05\
\x01h\0\x01p}\x01k\x07\x01j\x01\x08\x01\x02\x01@\x02\x04self\x06\x03keys\0\x09\x04\
\0\x11[method]store.get\x01\x0a\x01j\0\x01\x02\x01@\x03\x04self\x06\x03keys\x05v\
alue\x07\0\x0b\x04\0\x11[method]store.set\x01\x0c\x01@\x02\x04self\x06\x03keys\0\
\x0b\x04\0\x14[method]store.delete\x01\x0d\x01j\x01\x7f\x01\x02\x01@\x02\x04self\
\x06\x03keys\0\x0e\x04\0\x14[method]store.exists\x01\x0f\x01ps\x01j\x01\x10\x01\x02\
\x01@\x01\x04self\x06\0\x11\x04\0\x16[method]store.get-keys\x01\x12\x03\0\x1dwas\
mvision:platform/key-value\x05\0\x01B\x0a\x01m\x06\x07success\x17destination-not\
-allowed\x0binvalid-url\x0drequest-error\x0druntime-error\x11too-many-requests\x04\
\0\x0ahttp-error\x03\0\0\x01q\x04\x10store-table-full\0\0\x0dno-such-store\0\0\x0d\
access-denied\0\0\x05other\x01s\0\x04\0\x05error\x03\0\x02\x01p}\x01j\x01\x04\x01\
\x01\x01@\x01\x03urls\0\x05\x04\0\x03get\x01\x06\x01@\x03\x03urls\x0ccontent-typ\
es\x04body\x04\0\x05\x04\0\x04post\x01\x07\x03\0\x18wasmvision:platform/http\x05\
\x01\x04\0\x1bwasmvision:platform/imports\x04\0\x0b\x0d\x01\0\x07imports\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.217.0\x10wit-bind\
gen-rust\x060.32.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

