// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
#ifndef __BINDINGS_IMPORTS_H
#define __BINDINGS_IMPORTS_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct imports_string_t {
  uint8_t*ptr;
  size_t len;
} imports_string_t;

typedef uint8_t wasmvision_platform_config_config_error_t;

// The requested key does not exist in the configuration.
#define WASMVISION_PLATFORM_CONFIG_CONFIG_ERROR_NO_SUCH_KEY 0

typedef struct {
  bool is_err;
  union {
    imports_string_t ok;
    wasmvision_platform_config_config_error_t err;
  } val;
} wasmvision_platform_config_result_string_config_error_t;

typedef struct wasmvision_platform_key_value_own_store_t {
  int32_t __handle;
} wasmvision_platform_key_value_own_store_t;

typedef struct wasmvision_platform_key_value_borrow_store_t {
  int32_t __handle;
} wasmvision_platform_key_value_borrow_store_t;

// The set of errors which may be raised by functions in this interface
typedef struct wasmvision_platform_key_value_error_t {
  uint8_t tag;
  union {
    imports_string_t     other;
  } val;
} wasmvision_platform_key_value_error_t;

// Too many stores have been opened simultaneously. Closing one or more
// stores prior to retrying may address this.
#define WASMVISION_PLATFORM_KEY_VALUE_ERROR_STORE_TABLE_FULL 0
// The host does not recognize the store label requested.
#define WASMVISION_PLATFORM_KEY_VALUE_ERROR_NO_SUCH_STORE 1
// The requesting component does not have access to the specified store
// (which may or may not exist).
#define WASMVISION_PLATFORM_KEY_VALUE_ERROR_ACCESS_DENIED 2
// Some implementation-specific error has occurred (e.g. I/O)
#define WASMVISION_PLATFORM_KEY_VALUE_ERROR_OTHER 3

typedef struct {
  bool is_err;
  union {
    wasmvision_platform_key_value_own_store_t ok;
    wasmvision_platform_key_value_error_t err;
  } val;
} wasmvision_platform_key_value_result_own_store_error_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} imports_list_u8_t;

typedef struct {
  bool is_some;
  imports_list_u8_t val;
} imports_option_list_u8_t;

typedef struct {
  bool is_err;
  union {
    imports_option_list_u8_t ok;
    wasmvision_platform_key_value_error_t err;
  } val;
} wasmvision_platform_key_value_result_option_list_u8_error_t;

typedef struct {
  bool is_err;
  union {
    wasmvision_platform_key_value_error_t err;
  } val;
} wasmvision_platform_key_value_result_void_error_t;

typedef struct {
  bool is_err;
  union {
    bool ok;
    wasmvision_platform_key_value_error_t err;
  } val;
} wasmvision_platform_key_value_result_bool_error_t;

typedef struct {
  imports_string_t *ptr;
  size_t len;
} imports_list_string_t;

typedef struct {
  bool is_err;
  union {
    imports_list_string_t ok;
    wasmvision_platform_key_value_error_t err;
  } val;
} wasmvision_platform_key_value_result_list_string_error_t;

// HTTP errors returned by the runtime.
typedef uint8_t wasmvision_platform_http_http_error_t;

#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_SUCCESS 0
#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_DESTINATION_NOT_ALLOWED 1
#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_INVALID_URL 2
#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_REQUEST_ERROR 3
#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_RUNTIME_ERROR 4
#define WASMVISION_PLATFORM_HTTP_HTTP_ERROR_TOO_MANY_REQUESTS 5

typedef struct {
  bool is_err;
  union {
    imports_list_u8_t ok;
    wasmvision_platform_http_http_error_t err;
  } val;
} wasmvision_platform_http_result_list_u8_http_error_t;

// Imported Functions from `wasmvision:platform/logging`
// Log a message on the host.
extern void wasmvision_platform_logging_log(imports_string_t *msg);
// Print a message on the host.
extern void wasmvision_platform_logging_println(imports_string_t *msg);

// Imported Functions from `wasmvision:platform/config`
extern bool wasmvision_platform_config_get_config(imports_string_t *key, imports_string_t *ret, wasmvision_platform_config_config_error_t *err);

// Imported Functions from `wasmvision:platform/key-value`
// Open the store with the specified label.
// 
// `label` must refer to a store allowed in the spin.toml manifest.
// 
// `error::no-such-store` will be raised if the `label` is not recognized.
extern bool wasmvision_platform_key_value_static_store_open(imports_string_t *label, wasmvision_platform_key_value_own_store_t *ret, wasmvision_platform_key_value_error_t *err);
// Get the value associated with the specified `key`
// 
// Returns `ok(none)` if the key does not exist.
extern bool wasmvision_platform_key_value_method_store_get(wasmvision_platform_key_value_borrow_store_t self, imports_string_t *key, imports_option_list_u8_t *ret, wasmvision_platform_key_value_error_t *err);
// Set the `value` associated with the specified `key` overwriting any existing value.
extern bool wasmvision_platform_key_value_method_store_set(wasmvision_platform_key_value_borrow_store_t self, imports_string_t *key, imports_list_u8_t *value, wasmvision_platform_key_value_error_t *err);
// Delete the tuple with the specified `key`
// 
// No error is raised if a tuple did not previously exist for `key`.
extern bool wasmvision_platform_key_value_method_store_delete(wasmvision_platform_key_value_borrow_store_t self, imports_string_t *key, wasmvision_platform_key_value_error_t *err);
// Return whether a tuple exists for the specified `key`
extern bool wasmvision_platform_key_value_method_store_exists(wasmvision_platform_key_value_borrow_store_t self, imports_string_t *key, bool *ret, wasmvision_platform_key_value_error_t *err);
// Return a list of all the keys
extern bool wasmvision_platform_key_value_method_store_get_keys(wasmvision_platform_key_value_borrow_store_t self, imports_list_string_t *ret, wasmvision_platform_key_value_error_t *err);

// Imported Functions from `wasmvision:platform/http`
// Get the content at the specified URL.
// Returns either the content or an error.
extern bool wasmvision_platform_http_get(imports_string_t *url, imports_list_u8_t *ret, wasmvision_platform_http_http_error_t *err);
// Post the content to the specified URL.
// Returns either the response content or an error.
extern bool wasmvision_platform_http_post(imports_string_t *url, imports_string_t *content_type, imports_list_u8_t *body, imports_list_u8_t *ret, wasmvision_platform_http_http_error_t *err);

// Helper Functions

void wasmvision_platform_config_result_string_config_error_free(wasmvision_platform_config_result_string_config_error_t *ptr);

extern void wasmvision_platform_key_value_store_drop_own(wasmvision_platform_key_value_own_store_t handle);

extern wasmvision_platform_key_value_borrow_store_t wasmvision_platform_key_value_borrow_store(wasmvision_platform_key_value_own_store_t handle);

void wasmvision_platform_key_value_error_free(wasmvision_platform_key_value_error_t *ptr);

void wasmvision_platform_key_value_result_own_store_error_free(wasmvision_platform_key_value_result_own_store_error_t *ptr);

void imports_list_u8_free(imports_list_u8_t *ptr);

void imports_option_list_u8_free(imports_option_list_u8_t *ptr);

void wasmvision_platform_key_value_result_option_list_u8_error_free(wasmvision_platform_key_value_result_option_list_u8_error_t *ptr);

void wasmvision_platform_key_value_result_void_error_free(wasmvision_platform_key_value_result_void_error_t *ptr);

void wasmvision_platform_key_value_result_bool_error_free(wasmvision_platform_key_value_result_bool_error_t *ptr);

void imports_list_string_free(imports_list_string_t *ptr);

void wasmvision_platform_key_value_result_list_string_error_free(wasmvision_platform_key_value_result_list_string_error_t *ptr);

void wasmvision_platform_http_result_list_u8_http_error_free(wasmvision_platform_http_result_list_u8_http_error_t *ptr);

// Transfers ownership of `s` into the string `ret`
void imports_string_set(imports_string_t *ret, const char*s);

// Creates a copy of the input nul-terminate string `s` and
// stores it into the component model string `ret`.
void imports_string_dup(imports_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void imports_string_free(imports_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
